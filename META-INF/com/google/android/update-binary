#!/sbin/sh
# MountRW for Recovery by Jigsaw
# Code by osm0sis modifed by Jigsaw

export OUTFD=$2;

BOOTMODE=false;
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true;


[ -d /postinstall/tmp ] && POSTINSTALL=/postinstall;
[ "$MHOME" ] || export MHOME=$POSTINSTALL/tmp/MountRW;
[ "$ANDROID_ROOT" ] || ANDROID_ROOT=/system;


ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD;
    shift
  done
}

show_progress() { echo "progress $1 $2" >> /proc/self/fd/$OUTFD; }
file_getprop() { grep "^$2=" "$1" | tail -n1 | cut -d= -f2-; }
find_slot() {
  local slot=$(getprop ro.boot.slot_suffix 2>/dev/null);
  [ "$slot" ] || slot=$(grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2);
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null);
    [ "$slot" ] || slot=$(grep -o 'androidboot.slot=.*$' /proc/cmdline | cut -d\  -f1 | cut -d= -f2);
    [ "$slot" ] && slot=_$slot;
  fi;
  [ "$slot" == "normal" ] && unset slot;
  [ "$slot" ] && echo "$slot";
}
setup_mountpoint() {
  [ -L $1 ] && mv -f $1 ${1}_link;
  if [ ! -d $1 ]; then
    rm -f $1;
    mkdir -p $1;
  fi;
}
is_mounted() { mount | grep -q " $1 "; }
mount_apex() {
  [ -d /system_root/system/apex ] || return 1;
  local apex dest loop minorx num shcon var;
  setup_mountpoint /apex;
  mount -t tmpfs tmpfs /apex -o mode=755 && touch /apex/apextmp;
  shcon=$(cat /proc/self/attr/current);
  echo "u:r:su:s0" > /proc/self/attr/current 2>/dev/null; # work around LOS Recovery not allowing loop mounts in recovery context
  minorx=1;
  [ -e /dev/block/loop1 ] && minorx=$(ls -l /dev/block/loop1 | awk '{ print $6 }');
  num=0;
  for apex in /system_root/system/apex/*; do
    dest=/apex/$(basename $apex | sed -E -e 's;\.apex$|\.capex$;;' -e 's;\.current$|\.release$;;');
    mkdir -p $dest;
    case $apex in
      *.apex|*.capex)
        unzip -qo $apex original_apex -d /apex;
        [ -f /apex/original_apex ] && apex=/apex/original_apex;
        unzip -qo $apex apex_payload.img -d /apex;
        mv -f /apex/original_apex $dest.apex 2>/dev/null;
        mv -f /apex/apex_payload.img $dest.img;
        mount -t ext4 -o ro,noatime $dest.img $dest 2>/dev/null && echo "$dest (direct)" >&2;
        if [ $? != 0 ]; then
          while [ $num -lt 64 ]; do
            loop=/dev/block/loop$num;
            [ -e $loop ] || mknod $loop b 7 $((num * minorx));
            losetup $loop $dest.img 2>/dev/null;
            num=$((num + 1));
            losetup $loop | grep -q $dest.img && break;
          done;
          mount -t ext4 -o ro,loop,noatime $loop $dest && echo "$dest (loop)" >&2;
          if [ $? != 0 ]; then
            losetup -d $loop 2>/dev/null;
            if [ $num -eq 64 -a $(losetup -f) == "/dev/block/loop0" ]; then
              echo "Aborting apex mounts due to broken environment..." >&2;
              break;
            fi;
          fi;
        fi;
      ;;
      *) mount -o bind $apex $dest && echo "$dest (bind)" >&2;;
    esac;
  done;
  echo "$shcon" > /proc/self/attr/current 2>/dev/null;
  for var in $(grep -o 'export .* /.*' /system_root/init.environ.rc | awk '{ print $2 }'); do
    eval OLD_${var}=\$$var;
  done;
  $(grep -o 'export .* /.*' /system_root/init.environ.rc | sed 's; /;=/;'); unset export;
  touch /apex/apexak3;
}
umount_apex() {
  [ -f /apex/apexak3 ] || return 1;
  echo "Unmounting apex..." >&2;
  local dest loop var;
  for var in $(grep -o 'export .* /.*' /system_root/init.environ.rc 2>/dev/null | awk '{ print $2 }'); do
    if [ "$(eval echo \$OLD_$var)" ]; then
      eval $var=\$OLD_${var};
    else
      eval unset $var;
    fi;
    unset OLD_${var};
  done;
  for dest in $(find /apex -type d -mindepth 1 -maxdepth 1); do
    loop=$(mount | grep $dest | grep loop | cut -d\  -f1);
    umount -l $dest;
    losetup $loop >/dev/null 2>&1 && losetup -d $loop;
  done;
  [ -f /apex/apextmp ] && umount /apex;
  rm -rf /apex/apexak3 /apex 2>/dev/null;
}
mount_all() {
  local byname mount slot system;
  echo "Mounting..." >&2;
  byname=bootdevice/by-name;
  [ -d /dev/block/$byname ] || byname=$(find /dev/block/platform -type d -name by-name 2>/dev/null | head -n1 | cut -d/ -f4-);
  [ -e /dev/block/$byname/super -a -d /dev/block/mapper ] && byname=mapper;
  [ -e /dev/block/$byname/system ] || slot=$(find_slot);
  for mount in /cache /data /metadata /persist /persist-lg; do
    if ! is_mounted $mount; then
      mount $mount 2>/dev/null && echo "$mount (fstab)" >&2 && UMOUNTLIST="$UMOUNTLIST $mount";
      if [ $? != 0 -a -e /dev/block/$byname$mount ]; then
        setup_mountpoint $mount;
        mount -o ro -t auto /dev/block/$byname$mount $mount && echo "$mount (direct)" >&2 && UMOUNTLIST="$UMOUNTLIST $mount";
      fi;
    fi;
  done;
  setup_mountpoint $ANDROID_ROOT;
  if ! is_mounted $ANDROID_ROOT; then
    mount -o ro -t auto $ANDROID_ROOT 2>/dev/null && echo "$ANDROID_ROOT (\$ANDROID_ROOT)" >&2;
  fi;
  case $ANDROID_ROOT in
    /system_root) setup_mountpoint /system;;
    /system)
      if ! is_mounted /system && ! is_mounted /system_root; then
        setup_mountpoint /system_root;
        mount -o ro -t auto /system_root && echo "/system_root (fstab)" >&2;
      elif [ -f /system/system/build.prop ]; then
        setup_mountpoint /system_root;
        mount --move /system /system_root && echo "/system_root (moved)" >&2;
      fi;
      if [ $? != 0 ]; then
        (umount /system;
        umount -l /system) 2>/dev/null;
        mount -o ro -t auto /dev/block/$byname/system$slot /system_root && echo "/system_root (direct)" >&2;
      fi;
    ;;
  esac;
  [ -f /system_root/system/build.prop ] && system=/system;
  for mount in /vendor /product /system_ext /OP /modem; do
    mount -o ro -t auto $mount 2>/dev/null && echo "$mount (fstab)" >&2;
    if [ $? != 0 ] && [ -L /system$mount -o -L /system_root$system$mount ]; then
      setup_mountpoint $mount;
      mount -o ro -t auto /dev/block/$byname$mount$slot $mount && echo "$mount (direct)" >&2;
    fi;
  done;
  if is_mounted /system_root; then
    mount_apex;
    mount -o bind /system_root$system /system && echo "/system (bind)" >&2;
  fi;
  echo " " >&2;
}
umount_all() {
  local mount;
  echo "Unmounting..." >&2;
  (if [ ! -d /postinstall/tmp ]; then
    umount /system;
    umount -l /system;
  fi) 2>/dev/null;
  umount_apex;
  (if [ ! -d /postinstall/tmp ]; then
    umount /system_root;
    umount -l /system_root;
  fi;
  PATH="$OLD_PATH" umount /vendor; # busybox umount /vendor breaks recovery on some hacky devices
  PATH="$OLD_PATH" umount -l /vendor;
  for mount in /mnt/system /mnt/vendor /product /mnt/product /system_ext /mnt/system_ext $UMOUNTLIST; do
    umount $mount;
    umount -l $mount;
  done) 2>/dev/null;
}
setup_env() {
  $BOOTMODE && return 1;
  mount -o bind /dev/urandom /dev/random;
  if [ -L /etc ]; then
    setup_mountpoint /etc;
    cp -af /etc_link/* /etc;
    sed -i 's; / ; /system_root ;' /etc/fstab;
  fi;
  umount_all;
  mount_all;
  OLD_LD_PATH=$LD_LIBRARY_PATH;
  OLD_LD_PRE=$LD_PRELOAD;
  OLD_LD_CFG=$LD_CONFIG_FILE;
  unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE;
  if [ ! "$(getprop 2>/dev/null)" ]; then
    getprop() {
      local propdir propfile propval;
      for propdir in / /system_root /system /vendor /product /product/etc /system_ext/etc /odm/etc; do
        for propfile in default.prop build.prop; do
          if [ "$propval" ]; then
            break 2;
          else
            propval="$(file_getprop $propdir/$propfile $1 2>/dev/null)";
          fi;
        done;
      done;
      echo "$propval";
    }
  elif [ ! "$(getprop ro.build.type 2>/dev/null)" ]; then
    getprop() {
      ($(which getprop) | grep "$1" | cut -d[ -f3 | cut -d] -f1) 2>/dev/null;
    }
  fi;
}
restore_env() {
  $BOOTMODE && return 1;
  local dir;
  unset -f getprop;
  [ "$OLD_LD_PATH" ] && export LD_LIBRARY_PATH=$OLD_LD_PATH;
  [ "$OLD_LD_PRE" ] && export LD_PRELOAD=$OLD_LD_PRE;
  [ "$OLD_LD_CFG" ] && export LD_CONFIG_FILE=$OLD_LD_CFG;
  unset OLD_LD_PATH OLD_LD_PRE OLD_LD_CFG;
  sleep 1;
  umount_all;
  [ -L /etc_link ] && rm -rf /etc/*;
  (for dir in /etc /apex /system_root /system /vendor /product /system_ext /OP /modem /metadata /persist /persist-lg; do
    if [ -L "${dir}_link" ]; then
      rmdir $dir;
      mv -f ${dir}_link $dir;
    fi;
  done;
  umount -l /dev/random) 2>/dev/null;
}
setup_bb() {
  local arch32 bb;
  for arch32 in x86 arm; do
    if [ -d $MHOME/tools/$arch32 ]; then
      bb=$MHOME/tools/$arch32/busybox;
      chmod 755 $bb;
      $bb >/dev/null 2>&1;
      if [ $? == 0 ]; then
        $bb mv -f $MHOME/tools/$arch32/* $MHOME/tools;
        break;
      fi;
    fi;
  done;
  bb=$MHOME/tools/busybox;
  chmod 755 $bb;
  $bb chmod -R 755 tools bin;
  $bb --install -s bin;
}

check_partition_rw() {
  local partition=$1
  echo "This is a test file from MountRW by Jigsaw" >> $partition/testRW.testfile
  if [[ $(stat -c%s $partition/testRW.testfile) -ge 10 ]]; then
    rm -f $partition/testRW.testfile
    ui_print "- $partition has RW. You can modify the files"
  else
    ui_print "- $partition has RO. You cannot modify files"
  fi
}

ui_print " "
ui_print "MountRW v1.0, easily mount partitions as read-write from your custom recovery."
ui_print " "
ui_print "Author: Jigsaw"
ui_print " "


if $BOOTMODE; then
	mount -o rw,remount -t auto / || mount -o rw,remount / 2>/dev/null;
else
    ui_print "Trying to Mount the Partition as RW";
    ui_print " "
    show_progress 1.1 9
	setup_env
	for W78 in /system /product /system_ext /system_root /vendor /OP /modem /persist /persist-lg; do
		if is_mounted $W78; then
			mount -o rw,remount -t auto $W78 2>/dev/null || print "! Failed mounting R/W <$W78>"
            check_partition_rw "$W78"
		fi
	done
fi
ui_print " "
ui_print "Done";



